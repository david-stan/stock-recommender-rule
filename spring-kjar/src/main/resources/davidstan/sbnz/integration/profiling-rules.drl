package davidstan.sbnz.integration;

import davidstan.sbnz.integration.facts.Stocks;
import davidstan.sbnz.integration.facts.Risk;
import davidstan.sbnz.integration.facts.Sectors;
import davidstan.sbnz.integration.models.Sector;
import davidstan.sbnz.integration.models.RiskDataDTO;
import davidstan.sbnz.integration.models.Profiles;


agenda-group "profiling"

global ExternalService externalService;

rule "Financial Sector rule"
	salience ((10*($vol*0.00001 + $close*1.2))/(10*($std+0.1)*($count*0.1)))
	when 
		$sec: Sectors(sector == Sector.FINANCIALS, $std: std, $vol: volume, $close: close, $attr: attributes)
		$sto: Stocks(sector == Sector.NA, $profile: chosenProfile)
		Number($count: intValue >= 0) from accumulate(
			Profiles($p: this, this memberOf $attr) from $profile,
			count($p)
		)
	then
		System.out.println("Financial: " + 10*($vol*0.00001 + $close*1.2)/(10*($std+0.1)*($count*0.1)));
		modify($sto) { setSector(Sector.FINANCIALS) }
end

rule "Information Sector rule"
	salience ((10*($vol*0.00001 + $close*1.2))/(10*($std+0.1)*($count*0.1)))
	when 
		$sec: Sectors(sector == Sector.INFORMATION_TECHNOLOGY, $std: std, $vol: volume, $close: close, $attr: attributes)
		$sto: Stocks(sector == Sector.NA, $profile: chosenProfile)
		Number($count: intValue >= 0) from accumulate(
			Profiles($p: this, this memberOf $attr) from $profile,
			count($p)
		)
	then
		System.out.println("Information: " + 10*($vol*0.00001 + $close*1.2)/(10*($std+0.1)*($count*0.1)));
		modify($sto) { setSector(Sector.INFORMATION_TECHNOLOGY) }
end

rule "Communication Sector rule"
	salience ((10*($vol*0.00001 + $close*1.2))/(10*($std+0.1)*($count*0.1)))
	when 
		$sec: Sectors(sector == Sector.COMMUNICATION_SERVICES, $std: std, $vol: volume, $close: close, $attr: attributes)
		$sto: Stocks(sector == Sector.NA, $profile: chosenProfile)
		Number($count: intValue >= 0) from accumulate(
			Profiles($p: this, this memberOf $attr) from $profile,
			count($p)
		)
	then
		System.out.println("Communication: " + 10*($vol*0.00001 + $close*1.2)/(10*($std+0.1)*($count*0.1)));
		modify($sto) { setSector(Sector.COMMUNICATION_SERVICES) }
end

rule "Health Sector rule"
	salience ((10*($vol*0.00001 + $close*1.2))/(10*($std+0.1)*($count*0.1)))
	when 
		$sec: Sectors(sector == Sector.HEALTH_CARE, $std: std, $vol: volume, $close: close, $attr: attributes)
		$sto: Stocks(sector == Sector.NA, $profile: chosenProfile)
		Number($count: intValue >= 0) from accumulate(
			Profiles($p: this, this memberOf $attr) from $profile,
			count($p)
		)
	then
		System.out.println("Health: " + 10*($vol*0.00001 + $close*1.2)/(10*($std+0.1)*($count*0.1)));
		modify($sto) { setSector(Sector.HEALTH_CARE) }
end

rule "Get chosen sector data rule"
    when
        $s: Stocks( sector != Sector.NA )
    then
    	System.out.println("Hello risk");
        kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("risk").setFocus();
        RiskDataDTO[] data = externalService.test($s.getSector().toString());
        insert(new Risk(true, $s.isRisk(), $s.isExperience(), data, $s.getSector()));
        System.out.println("Inserted");
        delete($s);
end